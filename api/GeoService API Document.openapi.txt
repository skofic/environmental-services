{
  "openapi": "3.0.3",
  "info": {
    "title": "GeoService API Document.paw",
    "description": "",
    "version": "1.0.0",
    "contact": {
      "name": "milko",
      "email": "skofic@gmail.com"
    }
  },
  "servers": [
    {
      "url": "https://echo.paw.cloud/",
      "description": ""
    }
  ],
  "paths": {
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/chelsa/click/": {
      "get": {
        "summary": "Contains point",
        "description": "The service will return the *Chelsa climate record* that contains the *provided point coordinates*.\n\nProvide the decimal *latitude* and *longitude* respectively in the **lat** and **lon** *query path required parameters*.\n\nThe resulting record will contain the following properties:\n\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *center* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding to the *measurement area's rect*.\n- `properties`: Chelsa climate data subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`.",
        "operationId": "458d3efd-5b68-45f2-86c4-56456cf9c423",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "46.30140",
              "description": ""
            }
          },
          {
            "name": "lon",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "7.50134",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return the *Chelsa climate record* that contains the *provided point coordinates*.\n\nProvide the decimal *latitude* and *longitude* respectively in the **lat** and **lon** *query path required parameters*.\n\nThe resulting record will contain the following properties:\n\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *center* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding to the *measurement area's rect*.\n- `properties`: Chelsa climate data subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`.",
          "content": {
            "text/plain": {}
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_key": {
                        "type": "string",
                        "example": "test-01"
                      },
                      "_id": {
                        "type": "string",
                        "example": "terms/test-01"
                      },
                      "_rev": {
                        "type": "string",
                        "example": "_h748Dtq---"
                      },
                      "_code": {
                        "type": "object",
                        "properties": {
                          "_lid": {
                            "type": "string",
                            "example": "test-01"
                          },
                          "_gid": {
                            "type": "string",
                            "example": "test-01"
                          },
                          "_aid": {
                            "type": "string",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "test-01"
                            ]
                          }
                        }
                      },
                      "_info": {
                        "type": "object",
                        "properties": {
                          "_title": {
                            "type": "object",
                            "properties": {
                              "iso_639_3_eng": {
                                "type": "string",
                                "example": "Test term 1"
                              }
                            }
                          }
                        }
                      },
                      "_data": {
                        "type": "object",
                        "properties": {
                          "_scalar": {
                            "type": "object",
                            "properties": {
                              "_type": {
                                "type": "string",
                                "example": "_type_object"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Pragma": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "no-cache"
                }
              },
              "Content-Security-Policy": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "frame-ancestors 'self'; form-action 'self';"
                }
              },
              "Set-Cookie": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "FOXXSID=5bfd413d583522aaf79250ee76b5e1edad98684e8aa8363b3bb66e93e350a9c4; expires=Mon, 10-Jun-2024 15:35:50 GMT; path=/, FOXXSID.sig=1918ffa9edcdd569135fbb135551081f673861758014dd1a2626bc6e4b7780c0; expires=Mon, 10-Jun-2024 15:35:50 GMT; path=/"
                }
              },
              "Server": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "ArangoDB"
                }
              },
              "Expires": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "0"
                }
              },
              "Cache-Control": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "no-cache, no-store, must-revalidate, pre-check=0, post-check=0, max-age=0, s-maxage=0"
                }
              },
              "X-Arango-Queue-Time-Seconds": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "0.000000"
                }
              },
              "Strict-Transport-Security": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000 ; includeSubDomains"
                }
              },
              "Content-Length": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "642"
                }
              },
              "Connection": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "Close"
                }
              },
              "X-Content-Type-Options": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/chelsa/dist/": {
      "post": {
        "summary": "Is within distance",
        "description": "The service will *select* all *Chelsa records* that lie within a *distance range* from the provided *reference geometry*. The distance is calculated from the *wgs84 centroids* of both the *reference geometry* and the Chelsa *measurement geometries*.\n\nThe service expects the following *query path* parameters:\n\n- **what**: This *required* parameter determines the type of service result: `KEY`, `SHAPE` or `DATA` to return a *selection of records*; `MIN`, `AVG`, `MAX`, `STD` or `VAR` for the *data aggregation* of the selection's *quantitative data*.\n- **min**: This *required* parameter represents the *minimum distance*. The value is expressed in *meters* and is *inclusive*.\n- **max**: This *required* parameter represents the *maximum distance*. The value is expressed in *meters* and is *inclusive*.\n- **sort**: This *optional* parameter determines whether results should be *sorted* and in what order. `NO` means no sorting, `ASC` means ascending order and `DESC` means descending order. The parameter is required only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. The *sort order* is determined by the *distance*.\n\nThe service also expects the following body parameters:\n\n- **geometry**: The *GeoJSON geometry* used to calculate the *distance*. It may be a *Point*, *MultiPoint*, *LineString*, *MultiLineString*, *Polygon* or *MultiPolygon*. *This parameter is required*.\n- **start**: The zero-based start index of the returned selection. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`, if omitted it defaults to 0.\n- **limit**: The number of records to return. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. If omitted the full selection will be returned, so it is advisable to use it.\n\nThe result of the service depends on the value of the `what` parameter:\n\n`KEY` will return only the *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n\n`SHAPE` will return the geometries of the selected measurement areas:\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*.\n- `distance`: The *distance in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the Chelsa *measurement geometries*.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *centroid* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding the *measurement area*.\n\n`DATA` will return the full selected records, corresponding to the elements of the `DATA` option, plus:\n- `properties`: Chelsa climate data subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`.\n\n`MIN`, `AVG`, `MAX`, `STD` or `VAR` will respectively return the aggregated *minimuum*, *average*, *maximum*, *standard deviation* or *variance* of the selection's *quantitative data*. The service will return a single record containing:\n- `count`: The number of selected records.\n- `distance`: The *distances in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the Chelsa *measurement geometries*, *aggregated* according to the *selected aggregation function*.\n- `properties`: Chelsa *quantitative data* subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`, *aggregated* according to the *selected aggregation function*.\n",
        "operationId": "2270b3cd-6b12-42fa-bf8f-295278d1fbf2",
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "10000",
              "description": ""
            }
          },
          {
            "name": "min",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "0",
              "description": ""
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "ASC",
              "description": ""
            }
          },
          {
            "name": "what",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "KEY",
              "description": ""
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will *select* all *Chelsa records* that lie within a *distance range* from the provided *reference geometry*. The distance is calculated from the *wgs84 centroids* of both the *reference geometry* and the Chelsa *measurement geometries*.\n\nThe service expects the following *query path* parameters:\n\n- **what**: This *required* parameter determines the type of service result: `KEY`, `SHAPE` or `DATA` to return a *selection of records*; `MIN`, `AVG`, `MAX`, `STD` or `VAR` for the *data aggregation* of the selection's *quantitative data*.\n- **min**: This *required* parameter represents the *minimum distance*. The value is expressed in *meters* and is *inclusive*.\n- **max**: This *required* parameter represents the *maximum distance*. The value is expressed in *meters* and is *inclusive*.\n- **sort**: This *optional* parameter determines whether results should be *sorted* and in what order. `NO` means no sorting, `ASC` means ascending order and `DESC` means descending order. The parameter is required only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. The *sort order* is determined by the *distance*.\n\nThe service also expects the following body parameters:\n\n- **geometry**: The *GeoJSON geometry* used to calculate the *distance*. It may be a *Point*, *MultiPoint*, *LineString*, *MultiLineString*, *Polygon* or *MultiPolygon*. *This parameter is required*.\n- **start**: The zero-based start index of the returned selection. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`, if omitted it defaults to 0.\n- **limit**: The number of records to return. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. If omitted the full selection will be returned, so it is advisable to use it.\n\nThe result of the service depends on the value of the `what` parameter:\n\n`KEY` will return only the *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n\n`SHAPE` will return the geometries of the selected measurement areas:\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*.\n- `distance`: The *distance in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the Chelsa *measurement geometries*.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *centroid* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding the *measurement area*.\n\n`DATA` will return the full selected records, corresponding to the elements of the `DATA` option, plus:\n- `properties`: Chelsa climate data subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`.\n\n`MIN`, `AVG`, `MAX`, `STD` or `VAR` will respectively return the aggregated *minimuum*, *average*, *maximum*, *standard deviation* or *variance* of the selection's *quantitative data*. The service will return a single record containing:\n- `count`: The number of selected records.\n- `distance`: The *distances in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the Chelsa *measurement geometries*, *aggregated* according to the *selected aggregation function*.\n- `properties`: Chelsa *quantitative data* subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`, *aggregated* according to the *selected aggregation function*.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Point"
                      },
                      "coordinates": {
                        "type": "number",
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "start": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/chelsa/contain/": {
      "post": {
        "summary": "Intersects",
        "description": "The service will *select* all *Chelsa records* whose *measurement area* intersects the provided *reference geometry*.\n\nThe service expects the following *query path* parameters:\n\n- **what**: This *required* parameter determines the type of service result: `KEY`, `SHAPE` or `DATA` to return a *selection of records*; `MIN`, `AVG`, `MAX`, `STD` or `VAR` for the *data aggregation* of the selection's *quantitative data*.\n\nThe service also expects the following body parameters:\n\n- **geometry**: The *GeoJSON geometry* that is used to *elect* all records whose *measurement area intersects* with it. It may be a *Point*, *MultiPoint*, *LineString*, *MultiLineString*, *Polygon* or *MultiPolygon*. *This parameter is required*.\n- **start**: The zero-based start index of the returned selection. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`, if omitted it defaults to 0.\n- **limit**: The number of records to return. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. If omitted the full selection will be returned, so it is advisable to use it.\n\nThe result of the service depends on the value of the `what` parameter:\n\n`KEY` will return only the *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n\n`SHAPE` will return the geometries of the selected measurement areas:\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*.\n- `distance`: The *distance in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the Chelsa *measurement geometries*.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *centroid* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding the *measurement area*.\n\n`DATA` will return the full selected records, corresponding to the elements of the `DATA` option, plus:\n- `properties`: Chelsa climate data subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`.\n\n`MIN`, `AVG`, `MAX`, `STD` or `VAR` will respectively return the aggregated *minimuum*, *average*, *maximum*, *standard deviation* or *variance* of the selection's *quantitative data*. The service will return a single record containing:\n- `count`: The number of selected records.\n- `distance`: The *distances in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the Chelsa *measurement geometries*, *aggregated* according to the *selected aggregation function*.\n- `properties`: Chelsa *quantitative data* subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`, *aggregated* according to the *selected aggregation function*.\n",
        "operationId": "ec151f7d-b473-4168-a83b-977202bfb770",
        "parameters": [
          {
            "name": "what",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "KEY",
              "description": ""
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will *select* all *Chelsa records* whose *measurement area* intersects the provided *reference geometry*.\n\nThe service expects the following *query path* parameters:\n\n- **what**: This *required* parameter determines the type of service result: `KEY`, `SHAPE` or `DATA` to return a *selection of records*; `MIN`, `AVG`, `MAX`, `STD` or `VAR` for the *data aggregation* of the selection's *quantitative data*.\n\nThe service also expects the following body parameters:\n\n- **geometry**: The *GeoJSON geometry* that is used to *elect* all records whose *measurement area intersects* with it. It may be a *Point*, *MultiPoint*, *LineString*, *MultiLineString*, *Polygon* or *MultiPolygon*. *This parameter is required*.\n- **start**: The zero-based start index of the returned selection. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`, if omitted it defaults to 0.\n- **limit**: The number of records to return. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. If omitted the full selection will be returned, so it is advisable to use it.\n\nThe result of the service depends on the value of the `what` parameter:\n\n`KEY` will return only the *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n\n`SHAPE` will return the geometries of the selected measurement areas:\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*.\n- `distance`: The *distance in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the Chelsa *measurement geometries*.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *centroid* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding the *measurement area*.\n\n`DATA` will return the full selected records, corresponding to the elements of the `DATA` option, plus:\n- `properties`: Chelsa climate data subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`.\n\n`MIN`, `AVG`, `MAX`, `STD` or `VAR` will respectively return the aggregated *minimuum*, *average*, *maximum*, *standard deviation* or *variance* of the selection's *quantitative data*. The service will return a single record containing:\n- `count`: The number of selected records.\n- `distance`: The *distances in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the Chelsa *measurement geometries*, *aggregated* according to the *selected aggregation function*.\n- `properties`: Chelsa *quantitative data* subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`, *aggregated* according to the *selected aggregation function*.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Polygon"
                      },
                      "coordinates": {
                        "type": "object",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  },
                  "start": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/worldclim/click/": {
      "get": {
        "summary": "Contains point",
        "description": "The service will return the *WorldClim climate record* that contains the *provided point coordinates*.\n\nProvide the decimal *latitude* and *longitude* respectively in the **lat** and **lon** *query path required parameters*.\n\nThe resulting record will contain the following properties:\n\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *center* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding to the *measurement area's rect*.\n- `properties`: Chelsa climate data subdivided into the following historical and modelled time periods: `1970-2000`, `2021-2040`, `2041-2060`, `2061-2080` and `2081-2100`.",
        "operationId": "9d15eeb6-133e-4230-876a-e0d1dc4c4545",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "46.30140",
              "description": ""
            }
          },
          {
            "name": "lon",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "7.50134",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return the *WorldClim climate record* that contains the *provided point coordinates*.\n\nProvide the decimal *latitude* and *longitude* respectively in the **lat** and **lon** *query path required parameters*.\n\nThe resulting record will contain the following properties:\n\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *center* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding to the *measurement area's rect*.\n- `properties`: Chelsa climate data subdivided into the following historical and modelled time periods: `1970-2000`, `2021-2040`, `2041-2060`, `2061-2080` and `2081-2100`.",
          "content": {
            "text/plain": {}
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/worldclim/dist/": {
      "post": {
        "summary": "Is within distance",
        "description": "The service will *select* all *WorldClim records* that lie within a *distance range* from the provided *reference geometry*. The distance is calculated from the *wgs84 centroids* of both the *reference geometry* and the WorldClim *measurement geometries*.\n\nThe service expects the following *query path* parameters:\n\n- **what**: This *required* parameter determines the type of service result: `KEY`, `SHAPE` or `DATA` to return a *selection of records*; `MIN`, `AVG`, `MAX`, `STD` or `VAR` for the *data aggregation* of the selection's *quantitative data*.\n- **min**: This *required* parameter represents the *minimum distance*. The value is expressed in *meters* and is *inclusive*.\n- **max**: This *required* parameter represents the *maximum distance*. The value is expressed in *meters* and is *inclusive*.\n- **sort**: This *optional* parameter determines whether results should be *sorted* and in what order. `NO` means no sorting, `ASC` means ascending order and `DESC` means descending order. The parameter is required only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. The *sort order* is determined by the *distance*.\n\nThe service also expects the following body parameters:\n\n- **geometry**: The *GeoJSON geometry* used to calculate the *distance*. It may be a *Point*, *MultiPoint*, *LineString*, *MultiLineString*, *Polygon* or *MultiPolygon*. *This parameter is required*.\n- **start**: The zero-based start index of the returned selection. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`, if omitted it defaults to 0.\n- **limit**: The number of records to return. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. If omitted the full selection will be returned, so it is advisable to use it.\n\nThe result of the service depends on the value of the `what` parameter:\n\n`KEY` will return only the *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n\n`SHAPE` will return the geometries of the selected measurement areas:\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*.\n- `distance`: The *distance in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the Chelsa *measurement geometries*.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *centroid* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding the *measurement area*.\n\n`DATA` will return the full selected records, corresponding to the elements of the `DATA` option, plus:\n- `properties`: WorldClim climate data subdivided into the following historical and modelled time periods: `1970-2000`, `2021-2040`, `2041-2060`, `2061-2080` and `2081-2100`.\n\n`MIN`, `AVG`, `MAX`, `STD` or `VAR` will respectively return the aggregated *minimuum*, *average*, *maximum*, *standard deviation* or *variance* of the selection's *quantitative data*. The service will return a single record containing:\n- `count`: The number of selected records.\n- `distance`: The *distances in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the WorldClim *measurement geometries*, *aggregated* according to the *selected aggregation function*.\n- `properties`: WorldClim *quantitative data* subdivided into the following historical and modelled time periods: `1970-2000`, `2021-2040`, `2041-2060`, `2061-2080` and `2081-2100`, *aggregated* according to the *selected aggregation function*.\n",
        "operationId": "f27f4bfb-104b-47f6-9947-2b89f8ee6875",
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "10000",
              "description": ""
            }
          },
          {
            "name": "min",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "0",
              "description": ""
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "ASC",
              "description": ""
            }
          },
          {
            "name": "what",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "KEY",
              "description": ""
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will *select* all *WorldClim records* that lie within a *distance range* from the provided *reference geometry*. The distance is calculated from the *wgs84 centroids* of both the *reference geometry* and the WorldClim *measurement geometries*.\n\nThe service expects the following *query path* parameters:\n\n- **what**: This *required* parameter determines the type of service result: `KEY`, `SHAPE` or `DATA` to return a *selection of records*; `MIN`, `AVG`, `MAX`, `STD` or `VAR` for the *data aggregation* of the selection's *quantitative data*.\n- **min**: This *required* parameter represents the *minimum distance*. The value is expressed in *meters* and is *inclusive*.\n- **max**: This *required* parameter represents the *maximum distance*. The value is expressed in *meters* and is *inclusive*.\n- **sort**: This *optional* parameter determines whether results should be *sorted* and in what order. `NO` means no sorting, `ASC` means ascending order and `DESC` means descending order. The parameter is required only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. The *sort order* is determined by the *distance*.\n\nThe service also expects the following body parameters:\n\n- **geometry**: The *GeoJSON geometry* used to calculate the *distance*. It may be a *Point*, *MultiPoint*, *LineString*, *MultiLineString*, *Polygon* or *MultiPolygon*. *This parameter is required*.\n- **start**: The zero-based start index of the returned selection. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`, if omitted it defaults to 0.\n- **limit**: The number of records to return. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. If omitted the full selection will be returned, so it is advisable to use it.\n\nThe result of the service depends on the value of the `what` parameter:\n\n`KEY` will return only the *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n\n`SHAPE` will return the geometries of the selected measurement areas:\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*.\n- `distance`: The *distance in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the Chelsa *measurement geometries*.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *centroid* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding the *measurement area*.\n\n`DATA` will return the full selected records, corresponding to the elements of the `DATA` option, plus:\n- `properties`: WorldClim climate data subdivided into the following historical and modelled time periods: `1970-2000`, `2021-2040`, `2041-2060`, `2061-2080` and `2081-2100`.\n\n`MIN`, `AVG`, `MAX`, `STD` or `VAR` will respectively return the aggregated *minimuum*, *average*, *maximum*, *standard deviation* or *variance* of the selection's *quantitative data*. The service will return a single record containing:\n- `count`: The number of selected records.\n- `distance`: The *distances in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the WorldClim *measurement geometries*, *aggregated* according to the *selected aggregation function*.\n- `properties`: WorldClim *quantitative data* subdivided into the following historical and modelled time periods: `1970-2000`, `2021-2040`, `2041-2060`, `2061-2080` and `2081-2100`, *aggregated* according to the *selected aggregation function*.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Point"
                      },
                      "coordinates": {
                        "type": "number",
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "start": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/worldclim/contain/": {
      "post": {
        "summary": "Intersects",
        "description": "The service will *select* all *WorldClim records* whose *measurement area* intersects the provided *referWorldClimence geometry*.\n\nThe service expects the following *query path* parameters:\n\n- **what**: This *required* parameter determines the type of service result: `KEY`, `SHAPE` or `DATA` to return a *selection of records*; `MIN`, `AVG`, `MAX`, `STD` or `VAR` for the *data aggregation* of the selection's *quantitative data*.\n\nThe service also expects the following body parameters:\n\n- **geometry**: The *GeoJSON geometry* that is used to *elect* all records whose *measurement area intersects* with it. It may be a *Point*, *MultiPoint*, *LineString*, *MultiLineString*, *Polygon* or *MultiPolygon*. *This parameter is required*.\n- **start**: The zero-based start index of the returned selection. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`, if omitted it defaults to 0.\n- **limit**: The number of records to return. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. If omitted the full selection will be returned, so it is advisable to use it.\n\nThe result of the service depends on the value of the `what` parameter:\n\n`KEY` will return only the *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n\n`SHAPE` will return the geometries of the selected measurement areas:\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*.\n- `distance`: The *distance in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the WorldClim *measurement geometries*.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *centroid* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding the *measurement area*.\n\n`DATA` will return the full selected records, corresponding to the elements of the `DATA` option, plus:\n- `properties`: WorldClim climate data subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`.\n\n`MIN`, `AVG`, `MAX`, `STD` or `VAR` will respectively return the aggregated *minimuum*, *average*, *maximum*, *standard deviation* or *variance* of the selection's *quantitative data*. The service will return a single record containing:\n- `count`: The number of selected records.\n- `distance`: The *distances in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the WorldClim *measurement geometries*, *aggregated* according to the *selected aggregation function*.\n- `properties`: WorldClim *quantitative data* subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`, *aggregated* according to the *selected aggregation function*.\n",
        "operationId": "c283c7e4-8ea3-414e-b15d-2cf08112d272",
        "parameters": [
          {
            "name": "what",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "KEY",
              "description": ""
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will *select* all *WorldClim records* whose *measurement area* intersects the provided *referWorldClimence geometry*.\n\nThe service expects the following *query path* parameters:\n\n- **what**: This *required* parameter determines the type of service result: `KEY`, `SHAPE` or `DATA` to return a *selection of records*; `MIN`, `AVG`, `MAX`, `STD` or `VAR` for the *data aggregation* of the selection's *quantitative data*.\n\nThe service also expects the following body parameters:\n\n- **geometry**: The *GeoJSON geometry* that is used to *elect* all records whose *measurement area intersects* with it. It may be a *Point*, *MultiPoint*, *LineString*, *MultiLineString*, *Polygon* or *MultiPolygon*. *This parameter is required*.\n- **start**: The zero-based start index of the returned selection. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`, if omitted it defaults to 0.\n- **limit**: The number of records to return. The property is relevant only when the `what` parameter is `KEY`, `SHAPE` or `DATA`. If omitted the full selection will be returned, so it is advisable to use it.\n\nThe result of the service depends on the value of the `what` parameter:\n\n`KEY` will return only the *MD5 hash* of the *measurement area's rect*; corresponding to the `geometry_bounds` property.\n\n`SHAPE` will return the geometries of the selected measurement areas:\n- `geometry_hash`: The *MD5 hash* of the *measurement area's rect*.\n- `distance`: The *distance in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the WorldClim *measurement geometries*.\n- `geometry_point`: The *GeoJSON point geometry* corresponding to the *centroid* of the *measurement area*.\n- `geometry_bounds`: The *GeoJSON polygon geometry* corresponding the *measurement area*.\n\n`DATA` will return the full selected records, corresponding to the elements of the `DATA` option, plus:\n- `properties`: WorldClim climate data subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`.\n\n`MIN`, `AVG`, `MAX`, `STD` or `VAR` will respectively return the aggregated *minimuum*, *average*, *maximum*, *standard deviation* or *variance* of the selection's *quantitative data*. The service will return a single record containing:\n- `count`: The number of selected records.\n- `distance`: The *distances in meters* between the *wgs84 centroid* of the *reference geometry* and the *wgs84 centroid* of the WorldClim *measurement geometries*, *aggregated* according to the *selected aggregation function*.\n- `properties`: WorldClim *quantitative data* subdivided into the following historical and modelled time periods: `1981-2010`, `2011-2040`, `2041-2070` and `2071-2100`, *aggregated* according to the *selected aggregation function*.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "geometry": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Polygon"
                      },
                      "coordinates": {
                        "type": "object",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  },
                  "start": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/hash/": {
      "get": {
        "summary": "Point",
        "description": "The service will return the *shape hash* related to the provided point coordinates.\n\nThe service expects two *query parameters*:\n\n- `lat`: The *latitude* of the point.\n- `lon`: The *longitude* of the point.\n\nThe service will return the following object:\n\n- `geometry`: The *GeoJSON* representation of the point.\n- `geometry_hash`: The *hash* for the point.",
        "operationId": "5768bbe7-e8f3-47ee-aa50-5704f101da7e",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "42",
              "description": ""
            }
          },
          {
            "name": "lon",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "12",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return the *shape hash* related to the provided point coordinates.\n\nThe service expects two *query parameters*:\n\n- `lat`: The *latitude* of the point.\n- `lon`: The *longitude* of the point.\n\nThe service will return the following object:\n\n- `geometry`: The *GeoJSON* representation of the point.\n- `geometry_hash`: The *hash* for the point.",
          "content": {
            "text/plain": {}
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/hash/poly/": {
      "post": {
        "summary": "Polygon",
        "description": "The service will return the *shape hash* related to the provided polygon coordinates.\n\nThe service expects a `oordinates` *body parameter* containing the polygon coordinates.\nThe polygon shape should be provided at least as one array representing a *linear ring*.\nEach linear ring should consist of an array with at least *four longitude/latitude pairs*.\nThe *first* linear ring must be the *outermost*, while any *subsequent* linear rings will be interpreted as *holes*.\nThe *order* of the sequence of coordinates is important: *counter-clock* means the polygon *area* is *inside*, *clockwise* means the *area* of the polygon is *outside*.\n\nThe service will return the following object:\n\n- `geometry`: The *GeoJSON* representation of the polygon.\n- `geometry_hash`: The *hash* for the polygon.",
        "operationId": "e95f1620-610e-4897-a571-2489e0176caa",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return the *shape hash* related to the provided polygon coordinates.\n\nThe service expects a `oordinates` *body parameter* containing the polygon coordinates.\nThe polygon shape should be provided at least as one array representing a *linear ring*.\nEach linear ring should consist of an array with at least *four longitude/latitude pairs*.\nThe *first* linear ring must be the *outermost*, while any *subsequent* linear rings will be interpreted as *holes*.\nThe *order* of the sequence of coordinates is important: *counter-clock* means the polygon *area* is *inside*, *clockwise* means the *area* of the polygon is *outside*.\n\nThe service will return the following object:\n\n- `geometry`: The *GeoJSON* representation of the polygon.\n- `geometry_hash`: The *hash* for the polygon.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "coordinates": {
                    "type": "object",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/hash/multipoly/": {
      "post": {
        "summary": "MultiPolygon",
        "description": "The service will return the *shape hash* related to the provided multi-polygon coordinates.\n\nThe MultiPolygon shape should be provided as an *array* of *Polygon shapes*.\nThe polygon shape should be provided at least as *one array* representing a *linear ring*.\nEach linear ring should consist of an array with at least *four longitude/latitude pairs*.\nThe *first* linear ring must be the *outermost*, while any *subsequent* linear ring will be interpreted as *holes*.\nThe *order* of the sequence of coordinates is important: *ounter-clock* means the polygon area is *inside*, *clockwise* means the are of the polygon is *outside*.\n\nThe service will return the following object:\n\n- `geometry`: The *GeoJSON* representation of the multi-polygon.\n- `geometry_hash`: The *hash* for the multi-polygon.",
        "operationId": "184bf6ce-7511-4de4-af57-8590e1c64db9",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return the *shape hash* related to the provided multi-polygon coordinates.\n\nThe MultiPolygon shape should be provided as an *array* of *Polygon shapes*.\nThe polygon shape should be provided at least as *one array* representing a *linear ring*.\nEach linear ring should consist of an array with at least *four longitude/latitude pairs*.\nThe *first* linear ring must be the *outermost*, while any *subsequent* linear ring will be interpreted as *holes*.\nThe *order* of the sequence of coordinates is important: *ounter-clock* means the polygon area is *inside*, *clockwise* means the are of the polygon is *outside*.\n\nThe service will return the following object:\n\n- `geometry`: The *GeoJSON* representation of the multi-polygon.\n- `geometry_hash`: The *hash* for the multi-polygon.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "coordinates": {
                    "type": "object",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/gcu/id/": {
      "get": {
        "summary": "Unit ID list by unit number",
        "description": "The service will return all *unit IDs* related to the provided *unit number*.\n\nThe service expects the `gcu_id_number` query parameter containing a unit number.\n\nThe service will return the following object:\n\n- `gcu_id_number`: The *unit number*.\n- `gcu_id_unit-id_list`: The *list* of unit IDs associated with the *provided unit number*.",
        "operationId": "5336a849-358f-4c9e-b045-f2f878fecab9",
        "parameters": [
          {
            "name": "gcu_id_number",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "AUT00001",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return all *unit IDs* related to the provided *unit number*.\n\nThe service expects the `gcu_id_number` query parameter containing a unit number.\n\nThe service will return the following object:\n\n- `gcu_id_number`: The *unit number*.\n- `gcu_id_unit-id_list`: The *list* of unit IDs associated with the *provided unit number*.",
          "content": {
            "text/plain": {}
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/gcu/shape/": {
      "get": {
        "summary": "Unit geometry references by unit ID",
        "description": "The service will return the *unit number* and the *list* of *unit shape references* related to the *provided unit ID*.\n\nThe service expects the `gcu_id_unit-id` query parameter containing a unit ID.\n\nThe service will return the following object:\n\n- `gcu_id_number`: The *unit number* associated with the *provided unit ID*.\n- `gcu_id_unit-id`: The unit ID.\n- `geometry_hash_list`: The *list* of *shape references* associated with the *provided unit ID*.\n",
        "operationId": "571d5e41-d1b3-4a23-af71-807200e790a2",
        "parameters": [
          {
            "name": "gcu_id_unit-id",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "GBR000012010",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return the *unit number* and the *list* of *unit shape references* related to the *provided unit ID*.\n\nThe service expects the `gcu_id_unit-id` query parameter containing a unit ID.\n\nThe service will return the following object:\n\n- `gcu_id_number`: The *unit number* associated with the *provided unit ID*.\n- `gcu_id_unit-id`: The unit ID.\n- `geometry_hash_list`: The *list* of *shape references* associated with the *provided unit ID*.\n",
          "content": {
            "text/plain": {}
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/gcu/rec/": {
      "get": {
        "summary": "Unit by geometry reference",
        "description": "The service will return the *unit number and ID* associated with the provided *shape reference*.\n\nThe service expects the `geometry_hash` query parameter containing a *unit shape geometry reference*.\n\nThe service will return the following object:\n\n- `gcu_id_number`: The *unit number* associated with the *provided shape reference*.\n- `gcu_id_unit-id`: The unit ID associated with the *provided shape reference*.\n- `geometry_hash`: The *provided shape reference*.\n",
        "operationId": "8ebe0f0f-bdc5-4829-a62c-b45e989b7dd4",
        "parameters": [
          {
            "name": "geometry_hash",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "0df76d46196094c8bade10e30faf6ae0",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return the *unit number and ID* associated with the provided *shape reference*.\n\nThe service expects the `geometry_hash` query parameter containing a *unit shape geometry reference*.\n\nThe service will return the following object:\n\n- `gcu_id_number`: The *unit number* associated with the *provided shape reference*.\n- `gcu_id_unit-id`: The unit ID associated with the *provided shape reference*.\n- `geometry_hash`: The *provided shape reference*.\n",
          "content": {
            "text/plain": {}
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/shape/": {
      "get": {
        "summary": "Geometry by reference",
        "description": "The service will return the *shape record* identified by the *provided geometry hash*.\n\nThe service expects the `geometry_hash` query parameter with the *shape reference*.\n\nThe `geometry_hash` property of the returned record corresponds to the `_key` property of the shape record.",
        "operationId": "0a34efec-a7a8-43e0-a37c-a2ed7786941a",
        "parameters": [
          {
            "name": "geometry_hash",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "0df76d46196094c8bade10e30faf6ae0",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return the *shape record* identified by the *provided geometry hash*.\n\nThe service expects the `geometry_hash` query parameter with the *shape reference*.\n\nThe `geometry_hash` property of the returned record corresponds to the `_key` property of the shape record.",
          "content": {
            "text/plain": {}
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/shape/click/": {
      "get": {
        "summary": "Geometry by point",
        "description": "The service will return the *shape record* intersecting the *provided point* coordinate.\n\nThe service expects the `lat` and `lon` query parameters representing respectively the *latitude* and *longitude* of the point coordinate.\n\nThe `geometry_hash` property of the returned record corresponds to the `_key` property of the shape record.",
        "operationId": "e34797a0-0576-42f0-a89d-323eea8e1e9d",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "41.83",
              "description": ""
            }
          },
          {
            "name": "lon",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "16.02",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return the *shape record* intersecting the *provided point* coordinate.\n\nThe service expects the `lat` and `lon` query parameters representing respectively the *latitude* and *longitude* of the point coordinate.\n\nThe `geometry_hash` property of the returned record corresponds to the `_key` property of the shape record.",
          "content": {
            "text/plain": {}
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/shape/search/": {
      "post": {
        "summary": "Geometry search",
        "description": "The service will return shape records according to a set of provided query parameters.\n\nThe selection criteria is structured as follows:\n\n- `geometry_hash`: List of shape geometry hashes.\n- `std_dataset_ids`: List of dataset identifiers.\n- `geo_shape_area`: Shape area range, limits included.\n- `chr_AvElevation`: Shape average elevation range, limits included.\n- `chr_StdElevation`: Shape average elevation standard deviation range, limits included.\n- `chr_AvSlope`: Shape average slope range, limits included.\n- `chr_AvAspect`: Shape average area range, limits included.\n- `intersects`: GeoJSON geometry that intersects shapes.\n- `distance`: Provide the GeoJSON shape in reference and the distance range in range.\n- `paging`: Paging: provide `offset` and `limit` properties, or omit the property to return all available data.\n\nWhen filling the search criteria either provide a value or omit the corresponding property.\nRange values are included in the expected range, it is also possible to omit one of the terms.\nDistance and elevation ranges are expected to be expressed in meters.\n",
        "operationId": "07d3ee03-91b6-4ae4-9f65-aae121675f20",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return shape records according to a set of provided query parameters.\n\nThe selection criteria is structured as follows:\n\n- `geometry_hash`: List of shape geometry hashes.\n- `std_dataset_ids`: List of dataset identifiers.\n- `geo_shape_area`: Shape area range, limits included.\n- `chr_AvElevation`: Shape average elevation range, limits included.\n- `chr_StdElevation`: Shape average elevation standard deviation range, limits included.\n- `chr_AvSlope`: Shape average slope range, limits included.\n- `chr_AvAspect`: Shape average area range, limits included.\n- `intersects`: GeoJSON geometry that intersects shapes.\n- `distance`: Provide the GeoJSON shape in reference and the distance range in range.\n- `paging`: Paging: provide `offset` and `limit` properties, or omit the property to return all available data.\n\nWhen filling the search criteria either provide a value or omit the corresponding property.\nRange values are included in the expected range, it is also possible to omit one of the terms.\nDistance and elevation ranges are expected to be expressed in meters.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "paging": {
                    "type": "object",
                    "properties": {
                      "limit": {
                        "type": "integer",
                        "format": "int64",
                        "example": 100
                      },
                      "offset": {
                        "type": "integer",
                        "format": "int64",
                        "example": 0
                      }
                    }
                  },
                  "chr_AvElevation": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "type": "integer",
                        "format": "int64",
                        "example": 220
                      },
                      "max": {
                        "type": "integer",
                        "format": "int64",
                        "example": 930
                      }
                    }
                  },
                  "distance": {
                    "type": "object",
                    "properties": {
                      "range": {
                        "type": "object",
                        "properties": {
                          "min": {
                            "type": "integer",
                            "format": "int64",
                            "example": 0
                          },
                          "max": {
                            "type": "integer",
                            "format": "int64",
                            "example": 500000000
                          }
                        }
                      },
                      "reference": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "example": "Point"
                          },
                          "coordinates": {
                            "type": "number",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  },
                  "chr_AvAspect": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "type": "integer",
                        "format": "int64",
                        "example": 150
                      },
                      "max": {
                        "type": "integer",
                        "format": "int64",
                        "example": 190
                      }
                    }
                  },
                  "geometry_hash": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "034ee0b07b3f7bf680396cd7a551d6e1",
                      "5930def0e729e382651e07f39b7909c7",
                      "4bee1683207b0baecee58e23bba9c5c2"
                    ]
                  },
                  "std_dataset_ids": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "814b4937-3bbd-47c7-99d5-2cd51a0f3469"
                    ]
                  },
                  "intersects": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "Polygon"
                      },
                      "coordinates": {
                        "type": "object",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  },
                  "chr_AvSlope": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                      },
                      "max": {
                        "type": "integer",
                        "format": "int64",
                        "example": 30
                      }
                    }
                  },
                  "geo_shape_area": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "type": "integer",
                        "format": "int64",
                        "example": 32922692
                      },
                      "max": {
                        "type": "integer",
                        "format": "int64",
                        "example": 39275174
                      }
                    }
                  },
                  "chr_StdElevation": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "type": "integer",
                        "format": "int64",
                        "example": 5
                      },
                      "max": {
                        "type": "integer",
                        "format": "int64",
                        "example": 450
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/rs/meta/span/": {
      "post": {
        "summary": "Metadata by time span",
        "description": "This service will return the *summary* of *all data measurements* selected by the provided search parameters *grouped by date span*.\n\nThe service expects a series of search parameters in the body object:\n\n- `geometry_hash_list`: *Required* list of GCU shape references, as MD5 hash of geometry.\n- `std_date_span`: *Optional* list of requested date spans.\n- `std_date_start`: *Optional* minimum date.\n- `std_date_end`: *Optional* end date.\n- `std_terms`: *Optional* list of requested variable names.\n- `std_dataset_ids`: *Optional* list of requested dataset references.\n\nThe resulting data will contain one record for each date span:\n\n- `count`: The number of selected data records.\n- `std_date_span`: Date span: daily, monthly or yearly.\n- `std_date_start`: Dates range minimum.\n- `std_date_end`: Dates range maximum.\n- `std_terms`: List of featured variable names.\n- `std_dataset_ids`: List of featured dataset references.",
        "operationId": "d7fc2260-724a-4bbc-9223-e8b95602ec71",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "This service will return the *summary* of *all data measurements* selected by the provided search parameters *grouped by date span*.\n\nThe service expects a series of search parameters in the body object:\n\n- `geometry_hash_list`: *Required* list of GCU shape references, as MD5 hash of geometry.\n- `std_date_span`: *Optional* list of requested date spans.\n- `std_date_start`: *Optional* minimum date.\n- `std_date_end`: *Optional* end date.\n- `std_terms`: *Optional* list of requested variable names.\n- `std_dataset_ids`: *Optional* list of requested dataset references.\n\nThe resulting data will contain one record for each date span:\n\n- `count`: The number of selected data records.\n- `std_date_span`: Date span: daily, monthly or yearly.\n- `std_date_start`: Dates range minimum.\n- `std_date_end`: Dates range maximum.\n- `std_terms`: List of featured variable names.\n- `std_dataset_ids`: List of featured dataset references.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "geometry_hash_list": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "c8ebeade136c209a7d6b40dc2cc3a72d",
                      "02713e2716b7e8eec36ac6a61223f8a3"
                    ]
                  },
                  "std_date_start": {
                    "type": "string",
                    "example": "2000"
                  },
                  "std_date_span": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "std_date_span_day",
                      "std_date_span_month",
                      "std_date_span_year"
                    ]
                  },
                  "std_date_end": {
                    "type": "string",
                    "example": "2023"
                  },
                  "std_dataset_ids": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "5f9c61fc-8a82-41b5-b2ae-42c0068cfb6e",
                      "9f0b933b-a6e7-435d-a1ba-c49c10c94c52",
                      "647be387-4dda-4257-a7c8-e5c47e90ccc9",
                      "750b614a-8dbc-49e0-85e2-8279c2b80269",
                      "08e0810c-c259-409b-8626-e8699540cfaa",
                      "d9f9676f-d31e-4f31-80d7-fd00909039aa",
                      "5161a461-1fb1-46df-89de-fd1caab906e7",
                      "cfe881bd-65f3-4c4c-a0fb-c0b9fd35ea51",
                      "2a9ca201-0b15-495f-ad65-c138886986df"
                    ]
                  },
                  "std_terms": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "chr_RelHumid",
                      "env_climate_temp-2m",
                      "chr_LandSurfTemp",
                      "chr_AvLeafAreaIdx",
                      "chr_AvBiomass"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/rs/meta/shape/": {
      "post": {
        "summary": "Metadata by geometry and time span",
        "description": "This service will return the *summary* of *all data measurements* selected by the provided search parameters grouped by *shape* and *date span*.\n\nThe service expects a series of search parameters in the body object:\n\n- `geometry_hash_list`: *Required* list of GCU shape references, as MD5 hash of geometry.\n- `std_date_span`: *Optional* list of requested date spans.\n- `std_date_start`: *Optional* minimum date.\n- `std_date_end`: *Optional* end date.\n- `std_terms`: *Optional* list of requested variable names.\n- `std_dataset_ids`: *Optional* list of requested dataset references.\n\nThe resulting data will contain one record for each shape:\n\n- `geometry_hash`: The shape reference.\n- `properties`: Shape summary data grouped by date span, described below:\n- `count`: The number of selected data records.\n- `std_date_span`: Date span: daily, monthly or yearly.\n- `std_date_start`: Dates range minimum.\n- `std_date_end`: Dates range maximum.\n- `std_terms`: List of featured variable names.\n- `std_dataset_ids`: List of featured dataset references.",
        "operationId": "d64a4a3f-3744-4da3-80cf-13b8be9bddc5",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "This service will return the *summary* of *all data measurements* selected by the provided search parameters grouped by *shape* and *date span*.\n\nThe service expects a series of search parameters in the body object:\n\n- `geometry_hash_list`: *Required* list of GCU shape references, as MD5 hash of geometry.\n- `std_date_span`: *Optional* list of requested date spans.\n- `std_date_start`: *Optional* minimum date.\n- `std_date_end`: *Optional* end date.\n- `std_terms`: *Optional* list of requested variable names.\n- `std_dataset_ids`: *Optional* list of requested dataset references.\n\nThe resulting data will contain one record for each shape:\n\n- `geometry_hash`: The shape reference.\n- `properties`: Shape summary data grouped by date span, described below:\n- `count`: The number of selected data records.\n- `std_date_span`: Date span: daily, monthly or yearly.\n- `std_date_start`: Dates range minimum.\n- `std_date_end`: Dates range maximum.\n- `std_terms`: List of featured variable names.\n- `std_dataset_ids`: List of featured dataset references.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "geometry_hash_list": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "c8ebeade136c209a7d6b40dc2cc3a72d",
                      "02713e2716b7e8eec36ac6a61223f8a3"
                    ]
                  },
                  "std_date_start": {
                    "type": "string",
                    "example": "2000"
                  },
                  "std_date_span": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "std_date_span_day",
                      "std_date_span_month",
                      "std_date_span_year"
                    ]
                  },
                  "std_date_end": {
                    "type": "string",
                    "example": "2023"
                  },
                  "std_dataset_ids": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "5f9c61fc-8a82-41b5-b2ae-42c0068cfb6e",
                      "9f0b933b-a6e7-435d-a1ba-c49c10c94c52",
                      "647be387-4dda-4257-a7c8-e5c47e90ccc9",
                      "750b614a-8dbc-49e0-85e2-8279c2b80269",
                      "08e0810c-c259-409b-8626-e8699540cfaa",
                      "d9f9676f-d31e-4f31-80d7-fd00909039aa",
                      "5161a461-1fb1-46df-89de-fd1caab906e7",
                      "cfe881bd-65f3-4c4c-a0fb-c0b9fd35ea51",
                      "2a9ca201-0b15-495f-ad65-c138886986df"
                    ]
                  },
                  "std_terms": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "chr_RelHumid",
                      "env_climate_temp-2m",
                      "chr_LandSurfTemp",
                      "chr_AvLeafAreaIdx",
                      "chr_AvBiomass"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/rs/data/": {
      "post": {
        "summary": "Data by geometry and time span",
        "description": "This service will return *all data measurements* selected by the required *geometry hash* in the query path and *search parameters* in the body. The results will be grouped by *date span* and *measurement date*.\n\nThe service *requires* the shape reference to be provided in the query path and an *optional* series of search parameters in the body object:\n\n- `std_date_span`: *Optional* list of requested date spans.\n- `std_date_start`: *Optional* minimum date.\n- `std_date_end`: *Optional* end date.\n- `std_terms`: *Optional* list of requested variable names.\n- `std_dataset_ids`: *Optional* list of requested dataset references.\n\nThe resulting data will contain one record for each selected date span, and within the span, one element for each measurement date:\n\n- `std_date_span`: Date span: daily, monthly or yearly.\n- `std_date_series`: Shape data measurments for current date span:\n- `std_date`: Measurement date.\n- `properties`: Measurement variables.",
        "operationId": "e56b916f-7711-4262-a380-dc65bc8aa731",
        "parameters": [
          {
            "name": "geometry_hash",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "0000ba761f60e527dec3dedbebcf4911",
              "description": ""
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "This service will return *all data measurements* selected by the required *geometry hash* in the query path and *search parameters* in the body. The results will be grouped by *date span* and *measurement date*.\n\nThe service *requires* the shape reference to be provided in the query path and an *optional* series of search parameters in the body object:\n\n- `std_date_span`: *Optional* list of requested date spans.\n- `std_date_start`: *Optional* minimum date.\n- `std_date_end`: *Optional* end date.\n- `std_terms`: *Optional* list of requested variable names.\n- `std_dataset_ids`: *Optional* list of requested dataset references.\n\nThe resulting data will contain one record for each selected date span, and within the span, one element for each measurement date:\n\n- `std_date_span`: Date span: daily, monthly or yearly.\n- `std_date_series`: Shape data measurments for current date span:\n- `std_date`: Measurement date.\n- `properties`: Measurement variables.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "std_date_start": {
                    "type": "string",
                    "example": "2010"
                  },
                  "std_date_span": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "std_date_span_day",
                      "std_date_span_month",
                      "std_date_span_year"
                    ]
                  },
                  "std_date_end": {
                    "type": "string",
                    "example": "20101231"
                  },
                  "std_dataset_ids": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "5f9c61fc-8a82-41b5-b2ae-42c0068cfb6e",
                      "9f0b933b-a6e7-435d-a1ba-c49c10c94c52",
                      "647be387-4dda-4257-a7c8-e5c47e90ccc9",
                      "750b614a-8dbc-49e0-85e2-8279c2b80269",
                      "08e0810c-c259-409b-8626-e8699540cfaa",
                      "d9f9676f-d31e-4f31-80d7-fd00909039aa",
                      "5161a461-1fb1-46df-89de-fd1caab906e7",
                      "cfe881bd-65f3-4c4c-a0fb-c0b9fd35ea51",
                      "2a9ca201-0b15-495f-ad65-c138886986df"
                    ]
                  },
                  "std_terms": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "chr_RelHumid",
                      "env_climate_temp-2m",
                      "chr_LandSurfTemp",
                      "chr_AvLeafAreaIdx",
                      "chr_AvBiomass"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/do/meta/": {
      "post": {
        "summary": "Metadata for coordinates",
        "description": "This service will return the *summary* of *all data measurements* available for the *provided coordinate* and *data filters*.\n\nThe service *requires* the *latitude*, `lat`, and *longitude*, `lon`, as *query parameters* and an *object* in the *body* containing further *optional selection criteria*:\n\n- `std_date_start`: Start date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_date_end`: End date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_terms`: The list of required variables, as variable names.\n- `std_dataset_ids`: The list of required datasets, as dataset identifiers.\n- `geometry_point_radius`: The list of required resolution points, as the area radius expressed in decimal degrees.\n\nTo *ignore* the *selection criteria* just *omit* the *property*.\n\nThe resulting data will contain a single record:\n\n- `count`: The number of selected records.\n- `std_date_start`: Dates range minimum.\n- `std_date_end`: Dates range maximum.\n- `std_terms`: List of featured variable names.\n- `std_dataset_ids`: List of featured dataset references.\n- `geometry_point_radius`: List of featured measurement area radius.\n- `geometry_point`: List of featured measurement points.\n- `geometry_bounds`: List of featured measurement geometries.",
        "operationId": "9bf737a1-c8bd-47a6-93c3-72b302f1e283",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "42",
              "description": ""
            }
          },
          {
            "name": "lon",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "12",
              "description": ""
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "This service will return the *summary* of *all data measurements* available for the *provided coordinate* and *data filters*.\n\nThe service *requires* the *latitude*, `lat`, and *longitude*, `lon`, as *query parameters* and an *object* in the *body* containing further *optional selection criteria*:\n\n- `std_date_start`: Start date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_date_end`: End date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_terms`: The list of required variables, as variable names.\n- `std_dataset_ids`: The list of required datasets, as dataset identifiers.\n- `geometry_point_radius`: The list of required resolution points, as the area radius expressed in decimal degrees.\n\nTo *ignore* the *selection criteria* just *omit* the *property*.\n\nThe resulting data will contain a single record:\n\n- `count`: The number of selected records.\n- `std_date_start`: Dates range minimum.\n- `std_date_end`: Dates range maximum.\n- `std_terms`: List of featured variable names.\n- `std_dataset_ids`: List of featured dataset references.\n- `geometry_point_radius`: List of featured measurement area radius.\n- `geometry_point`: List of featured measurement points.\n- `geometry_bounds`: List of featured measurement geometries.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "std_date_start": {
                    "type": "string",
                    "example": "2004"
                  },
                  "std_date_end": {
                    "type": "string",
                    "example": "2005"
                  },
                  "std_dataset_ids": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "056e569a-66ef-4033-8d15-5c4c3c36c1bb",
                      "9eda6111-c840-4862-9759-4a805cd6fc35"
                    ]
                  },
                  "geometry_point_radius": {
                    "type": "number",
                    "items": {
                      "type": "number"
                    }
                  },
                  "std_terms": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "env_climate_fapar",
                      "env_climate_fapan",
                      "env_climate_sma",
                      "env_climate_smi"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/do/meta/shape/": {
      "post": {
        "summary": "Metadata by geometry for coordinates",
        "description": "This service will return the *summary* of *all data measurements* available for the *provided coordinate* and *data filters* *grouped by measurement area*.\n\nThe service *requires* the *latitude*, `lat`, and *longitude*, `lon`, as *query parameters* and an *object* in the *body* containing further *optional selection criteria*:\n\n- `std_date_start`: Start date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_date_end`: End date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_terms`: The list of required variables, as variable names.\n- `std_dataset_ids`: The list of required datasets, as dataset identifiers.\n- `geometry_point_radius`: The list of required resolution points, as the area radius expressed in decimal degrees.\n\nTo *ignore* the *selection criteria* just *omit* the *property*.\n\nThe resulting data will contain one record for each matched grid cell:\n\n- `count`: The number of selected records.\n- `std_date_start`: Dates range minimum.\n- `std_date_end`: Dates range maximum.\n- `std_terms`: List of featured variable names.\n- `std_dataset_ids`: List of featured dataset references.\n- `geometry_point_radius`: List of featured measurement area radius.\n- `geometry_point`: List of featured measurement points.\n- `geometry_bounds`: List of featured measurement geometries.",
        "operationId": "cbe34618-acea-444d-880c-e4ae397b74b9",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "42",
              "description": ""
            }
          },
          {
            "name": "lon",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "12",
              "description": ""
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "This service will return the *summary* of *all data measurements* available for the *provided coordinate* and *data filters* *grouped by measurement area*.\n\nThe service *requires* the *latitude*, `lat`, and *longitude*, `lon`, as *query parameters* and an *object* in the *body* containing further *optional selection criteria*:\n\n- `std_date_start`: Start date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_date_end`: End date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_terms`: The list of required variables, as variable names.\n- `std_dataset_ids`: The list of required datasets, as dataset identifiers.\n- `geometry_point_radius`: The list of required resolution points, as the area radius expressed in decimal degrees.\n\nTo *ignore* the *selection criteria* just *omit* the *property*.\n\nThe resulting data will contain one record for each matched grid cell:\n\n- `count`: The number of selected records.\n- `std_date_start`: Dates range minimum.\n- `std_date_end`: Dates range maximum.\n- `std_terms`: List of featured variable names.\n- `std_dataset_ids`: List of featured dataset references.\n- `geometry_point_radius`: List of featured measurement area radius.\n- `geometry_point`: List of featured measurement points.\n- `geometry_bounds`: List of featured measurement geometries.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "std_date_start": {
                    "type": "string",
                    "example": "2004"
                  },
                  "std_date_end": {
                    "type": "string",
                    "example": "2005"
                  },
                  "std_dataset_ids": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "056e569a-66ef-4033-8d15-5c4c3c36c1bb",
                      "9eda6111-c840-4862-9759-4a805cd6fc35"
                    ]
                  },
                  "geometry_point_radius": {
                    "type": "number",
                    "items": {
                      "type": "number"
                    }
                  },
                  "std_terms": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "env_climate_fapar",
                      "env_climate_fapan",
                      "env_climate_sma",
                      "env_climate_smi"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/do/data/shape/": {
      "post": {
        "summary": "Data by geometry",
        "description": "The service will return *European Drought Observatory* data *grouped by resolution*.\n\nThe service *requires* the *latitude*, `lat`, and *longitude*, `lon`, as *query parameters* and an *object* in the *body* containing further *optional selection criteria*:\n\n- `std_date_start`: Start date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_date_end`: End date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_terms`: The list of required variables, as variable names.\n- `std_dataset_ids`: The list of required datasets, as dataset identifiers.\n- `geometry_point_radius`: The list of required resolution points, as the area radius expressed in decimal degrees.\n\nTo *ignore* the *selection criteria* just *omit* the *property*.\n\nThe resulting data is sorted ascending by date and will be *grouped* by *resolution*, which is expressed by the *area radius*. Each record will contain *all* properties satisfying the query parameters.",
        "operationId": "54a20b15-f48a-4772-bb35-e93ad55b4093",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "42",
              "description": ""
            }
          },
          {
            "name": "lon",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "12",
              "description": ""
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return *European Drought Observatory* data *grouped by resolution*.\n\nThe service *requires* the *latitude*, `lat`, and *longitude*, `lon`, as *query parameters* and an *object* in the *body* containing further *optional selection criteria*:\n\n- `std_date_start`: Start date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_date_end`: End date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_terms`: The list of required variables, as variable names.\n- `std_dataset_ids`: The list of required datasets, as dataset identifiers.\n- `geometry_point_radius`: The list of required resolution points, as the area radius expressed in decimal degrees.\n\nTo *ignore* the *selection criteria* just *omit* the *property*.\n\nThe resulting data is sorted ascending by date and will be *grouped* by *resolution*, which is expressed by the *area radius*. Each record will contain *all* properties satisfying the query parameters.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "std_date_start": {
                    "type": "string",
                    "example": "2004"
                  },
                  "std_date_end": {
                    "type": "string",
                    "example": "2005"
                  },
                  "std_dataset_ids": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "056e569a-66ef-4033-8d15-5c4c3c36c1bb",
                      "9eda6111-c840-4862-9759-4a805cd6fc35"
                    ]
                  },
                  "geometry_point_radius": {
                    "type": "number",
                    "items": {
                      "type": "number"
                    }
                  },
                  "std_terms": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "env_climate_fapar",
                      "env_climate_fapan",
                      "env_climate_sma",
                      "env_climate_smi"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/do/data/date/": {
      "post": {
        "summary": "Data by date",
        "description": "The service will return *European Drought Observatory* data *grouped by date*.\n\nThe service *requires* the *latitude*, `lat`, and *longitude*, `lon`, as *query parameters* and an *object* in the *body* containing further *optional selection criteria*:\n\n- `std_date_start`: Start date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_date_end`: End date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_terms`: The list of required variables, as variable names.\n- `std_dataset_ids`: The list of required datasets, as dataset identifiers.\n- `geometry_point_radius`: The list of required resolution points, as the area radius expressed in decimal degrees.\n- `paging`: Results paging information. It is an object expecting `offset` and `limit`.\n\nTo *ignore* the *selection criteria* just *omit* the *property*.\n\nThe resulting data will be *grouped* and *sorted* by *date*, properties will be *merged by date*, so the records will *not contain geometry information*.\n\nIf you *omit* the `std_terms` selector, each record will *feature* the list of *dataset references*, `std_dataset_ids`, if you *select specific variables*, the *dataset references will be omitted*.\n",
        "operationId": "dabd8a18-f4cb-4706-a23d-75cafdd38174",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "42",
              "description": ""
            }
          },
          {
            "name": "lon",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "12",
              "description": ""
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return *European Drought Observatory* data *grouped by date*.\n\nThe service *requires* the *latitude*, `lat`, and *longitude*, `lon`, as *query parameters* and an *object* in the *body* containing further *optional selection criteria*:\n\n- `std_date_start`: Start date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_date_end`: End date as a `YYYYMMDD`, `YYYYMM`, or `YYYY` string.\n- `std_terms`: The list of required variables, as variable names.\n- `std_dataset_ids`: The list of required datasets, as dataset identifiers.\n- `geometry_point_radius`: The list of required resolution points, as the area radius expressed in decimal degrees.\n- `paging`: Results paging information. It is an object expecting `offset` and `limit`.\n\nTo *ignore* the *selection criteria* just *omit* the *property*.\n\nThe resulting data will be *grouped* and *sorted* by *date*, properties will be *merged by date*, so the records will *not contain geometry information*.\n\nIf you *omit* the `std_terms` selector, each record will *feature* the list of *dataset references*, `std_dataset_ids`, if you *select specific variables*, the *dataset references will be omitted*.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "std_date_start": {
                    "type": "string",
                    "example": "2004"
                  },
                  "paging": {
                    "type": "object",
                    "properties": {
                      "limit": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10
                      },
                      "offset": {
                        "type": "integer",
                        "format": "int64",
                        "example": 0
                      }
                    }
                  },
                  "std_date_end": {
                    "type": "string",
                    "example": "2005"
                  },
                  "std_dataset_ids": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "056e569a-66ef-4033-8d15-5c4c3c36c1bb",
                      "9eda6111-c840-4862-9759-4a805cd6fc35"
                    ]
                  },
                  "geometry_point_radius": {
                    "type": "number",
                    "items": {
                      "type": "number"
                    }
                  },
                  "std_terms": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "env_climate_fapar",
                      "env_climate_fapan",
                      "env_climate_sma",
                      "env_climate_smi"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/{Protocol}:/{Host}:{Port}/_db/{Db}/{Path}/dataset/query/": {
      "post": {
        "summary": "Query datasets",
        "description": "The service will return *dataset records* satisfying a set of *query parameters*.\n\nThe service *requires* the `op` query parameter that indicates how to *combine the search parameters*: `AND` means that *all* query parameters must be satisfied and `OR` means *at least one* query parameter must match.\n\nThe body contains a set of *optional selection criteria*:\n\n- `_key`: List of matching dataset keys.\n- `_collection`: List of matching collection names where data is stored.\n- `std_project`: List of matching project codes.\n- `std_dataset`: Select dataset code by space-separated acronym or wildcard.\n- `std_dataset_group`: List of matching dataset group codes.\n- `std_date`: Provide date start and end range, included.\n- `std_date_submission`: Provide submission date start and end range, included.\n- `count`: Provide minimum and maximum record count range.\n- `_subject`: List of matching dataset subject codes.\n- `_subjects`: List of matching data descriptor subject codes.\n- `_classes`: List of matching descriptor class codes; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `_domain`: List of matching descriptor domain codes; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `_tag`: List of matching descriptor tag codes; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `_title`: Provide space-separated list of tokens for searching in English title.\n- `_description`: Provide space-separated list of tokens for searching in English description.\n- `_citation`: Provide space-separated list of tokens for searching in citations.\n- `species_list`: Provide space-separated list of species tokens (genus, species, etc.).\n- `std_terms`: List of matching variables; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `std_terms_key`: List of matching key variables; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `std_terms_quant`: List of matching quantitative variables; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `std_terms_summary`: List of matching summary variables; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n\nTo *ignore* the *selection criteria* just *omit* the *property*.\n\nThe resulting data is *not sorted*.",
        "operationId": "0afc4b34-14a0-43a5-b5cb-38c816002d7c",
        "parameters": [
          {
            "name": "op",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "AND",
              "description": ""
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json; charset=utf-8",
              "description": ""
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "FOXXSID=null; FOXXSID.sig=659130347e9eb043443995f5b9aef83b6238df078ef297696fdd33b56bd7b0cb",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "The service will return *dataset records* satisfying a set of *query parameters*.\n\nThe service *requires* the `op` query parameter that indicates how to *combine the search parameters*: `AND` means that *all* query parameters must be satisfied and `OR` means *at least one* query parameter must match.\n\nThe body contains a set of *optional selection criteria*:\n\n- `_key`: List of matching dataset keys.\n- `_collection`: List of matching collection names where data is stored.\n- `std_project`: List of matching project codes.\n- `std_dataset`: Select dataset code by space-separated acronym or wildcard.\n- `std_dataset_group`: List of matching dataset group codes.\n- `std_date`: Provide date start and end range, included.\n- `std_date_submission`: Provide submission date start and end range, included.\n- `count`: Provide minimum and maximum record count range.\n- `_subject`: List of matching dataset subject codes.\n- `_subjects`: List of matching data descriptor subject codes.\n- `_classes`: List of matching descriptor class codes; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `_domain`: List of matching descriptor domain codes; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `_tag`: List of matching descriptor tag codes; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `_title`: Provide space-separated list of tokens for searching in English title.\n- `_description`: Provide space-separated list of tokens for searching in English description.\n- `_citation`: Provide space-separated list of tokens for searching in citations.\n- `species_list`: Provide space-separated list of species tokens (genus, species, etc.).\n- `std_terms`: List of matching variables; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `std_terms_key`: List of matching key variables; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `std_terms_quant`: List of matching quantitative variables; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n- `std_terms_summary`: List of matching summary variables; set `doAll` to `false` for matching at least one element, set it to `true` for matching all elements.\n\nTo *ignore* the *selection criteria* just *omit* the *property*.\n\nThe resulting data is *not sorted*.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "std_terms_quant": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "string",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "env_climate_fapar",
                          "env_climate_fapan"
                        ]
                      },
                      "doAll": {
                        "type": "boolean"
                      }
                    }
                  },
                  "_collection": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "DroughtObservatory"
                    ]
                  },
                  "std_dataset_group": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "EDO"
                    ]
                  },
                  "std_terms_key": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "string",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "geometry_hash",
                          "std_date"
                        ]
                      },
                      "doAll": {
                        "type": "boolean"
                      }
                    }
                  },
                  "_title": {
                    "type": "string",
                    "example": "drought radiation index"
                  },
                  "std_date": {
                    "type": "object",
                    "properties": {
                      "std_date_start": {
                        "type": "string",
                        "example": "1990"
                      },
                      "std_date_end": {
                        "type": "string",
                        "example": "2023"
                      }
                    }
                  },
                  "_key": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "056e569a-66ef-4033-8d15-5c4c3c36c1bb"
                    ]
                  },
                  "std_dataset": {
                    "type": "string",
                    "example": "EDO_FAPAR"
                  },
                  "std_date_submission": {
                    "type": "object",
                    "properties": {
                      "min": {
                        "type": "string",
                        "example": "2020"
                      },
                      "max": {
                        "type": "string",
                        "example": "2023"
                      }
                    }
                  },
                  "_description": {
                    "type": "string",
                    "example": "drought moisture temperature anomaly"
                  },
                  "std_project": {
                    "type": "string",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "EUFGIS"
                    ]
                  },
                  "std_terms": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "string",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "env_climate_fapar",
                          "env_climate_fapan"
                        ]
                      },
                      "doAll": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_key": {
                        "type": "string",
                        "example": "056e569a-66ef-4033-8d15-5c4c3c36c1bb"
                      },
                      "_collection": {
                        "type": "string",
                        "example": "DroughtObservatory"
                      },
                      "std_project": {
                        "type": "string",
                        "example": "EUFGIS"
                      },
                      "std_dataset": {
                        "type": "string",
                        "example": "EDO_FAPAR"
                      },
                      "std_dataset_group": {
                        "type": "string",
                        "example": "EDO"
                      },
                      "std_date_submission": {
                        "type": "string",
                        "example": "2023"
                      },
                      "std_date_start": {
                        "type": "string",
                        "example": "2002"
                      },
                      "std_date_end": {
                        "type": "string",
                        "example": "2022"
                      },
                      "_title": {
                        "type": "object",
                        "properties": {
                          "iso_639_3_eng": {
                            "type": "string",
                            "example": "Fraction of Absorbed Photosynthetically Active Radiation (FAPAR)"
                          }
                        }
                      },
                      "_description": {
                        "type": "object",
                        "properties": {
                          "iso_639_3_eng": {
                            "type": "string",
                            "example": "fAPAR (fraction of Absorbed Photosynthetically Active Radiation): 10-day time composite, 1 km spatial resolution. Values derive as follows: MERIS from 2002 to 2011, SPOT-VEGETATION from 2012 to 2013, MODIS from 2014 onwards.\n\nAnomaly of fAPAR (fraction of Absorbed Photosynthetically Active Radiation): 10-day time composite, 1 km spatial resolution. Values derive as follows: MERIS from 2002 to 2011, SPOT-VEGETATION from 2012 to 2013, MODIS from 2014 onwards.\n\nThe fAPAR MODIS absorption values are retrieved from the web source https://lpdaac.usgs.gov/dataset_discovery/modis/modis_products_table/mcd15a2, courtesy of the NASA EOSDIS Land Processes Distributed Active Archive Center (LP DAAC), USGS/Earth Resources Observation and Science (EROS) Center, Sioux Falls, South Dakota, United States of America.\n\nResolution: 0.04167 decimal degrees.\n\n**Publication**\nMyneni, R.B., S. Hoffman, Y. Knyazikhin, J. L. Privette, J. Glassy, Y. Tian, Y. Wang, X. Song, Y. Zhang, G.R. Smith, A. Lotsch, M. Friedl, J.T. Morisette, P. Votava, R.R. Nemani, and S.W. Running. 2002. Global Products of vegetation leaf area and fraction absorbed PAR from year one of MODIS data. Remote Sensing of Environment, 83, 214 –231.\nhttps://www.sciencedirect.com/science/article/pii/S0034425702000743?via%3Dihub"
                          }
                        }
                      },
                      "_url": {
                        "type": "string",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "[European Drought Observatory](https://edo.jrc.ec.europa.eu/edov2/php/index.php?id=1000)"
                        ]
                      },
                      "std_terms_key": {
                        "type": "string",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "geometry_hash",
                          "std_date"
                        ]
                      },
                      "std_terms": {
                        "type": "string",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "env_climate_fapar",
                          "env_climate_fapan"
                        ]
                      },
                      "std_terms_quant": {
                        "type": "string",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "env_climate_fapar",
                          "env_climate_fapan"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Pragma": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "no-cache"
                }
              },
              "X-Content-Type-Options": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "Content-Security-Policy": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "frame-ancestors 'self'; form-action 'self';"
                }
              },
              "Strict-Transport-Security": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000 ; includeSubDomains"
                }
              },
              "Server": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "ArangoDB"
                }
              },
              "Content-Type": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Cache-Control": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "no-cache, no-store, must-revalidate, pre-check=0, post-check=0, max-age=0, s-maxage=0"
                }
              },
              "Expires": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "0"
                }
              },
              "Content-Length": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "1921"
                }
              },
              "X-Arango-Queue-Time-Seconds": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "0.000000"
                }
              },
              "Connection": {
                "description": "",
                "schema": {
                  "type": "string",
                  "example": "Close"
                }
              }
            }
          }
        },
        "security": []
      }
    }
  },
  "components": {}
}